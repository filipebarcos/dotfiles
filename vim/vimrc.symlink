"avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0

set nocompatible               " be iMproved (required)
filetype off                   " (required)

" Vundle Config
set rtp+=~/.vim/bundle/vundle

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Wrap gitcommit file types at the appropriate length
filetype plugin indent on " (required)

syntax on
compiler ruby
colorscheme filipebarcos_ir_black
set t_Co=256

set autoindent
set background=dark            " Set backgroung to dark
set backspace=indent,eol,start " Intuitive backspacing
set directory=~/tmp            " Defaul dir to swp files
set hlsearch                   " Highlight matches
set hidden                     " Handle multiple buffers better
set incsearch                  " Highlight matches as you type
set laststatus=2               " Show the status line all the time
set nobackup                   " Don't make a backup before overwriting a file
set nowritebackup              " Same as above
set number                     " Set line numbers
set scrolloff=3                " Show 3 lines of context around the cursor
set showcmd                    " Display incomplete commands
set showmatch                  " highlight match when found
set showmode                   " Display the mode you're in
set textwidth=0 nosmartindent tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set title
set visualbell                 " No beeping
set wrap                       " Turn on line wrapping
set cursorline
set ttyfast                    " Blazing fast scroll
set lazyredraw                 " to avoid scrolling problems

set ignorecase                 " Case-insensitive searching
set smartcase                  " Case-sensitive IF contains a capital letter

set wildmenu                      " Enhanced command line completion
set wildmode=longest,list:longest " Complete files like shell

set complete=.,b,u,]                 " Current, buffers and tags
set completeopt=menu,preview         " Default config, just being explicit
set omnifunc=syntaxcomplete#Complete " Syntax completion enabled, depending on filetype

" CtrlP configs
map <silent> <LocalLeader>ff :CtrlP<CR>
map <silent> <LocalLeader>ft :CtrlPTag<CR>
map <silent> <LocalLeader>fb :CtrlPBuffer<CR>
map <silent> <LocalLeader>fr :CtrlPClearAllCache<CR>
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/](\.git|node_modules|tmp|log|bower_components|vcr)',
  \ 'file': 'tags$\|\v\.(DS_Store|beam|zip|so|png|jpg|gif|svg)$',
  \ }
let g:ctrlp_match_func = {'match' : 'matcher#cmatch' }

" Tab mappings
nnoremap <silent> <LocalLeader>ee :tabe $MYVIMRC<CR>
nnoremap <silent> <LocalLeader><CR> :tabe<CR>
nnoremap <silent> <LocalLeader>[ :tabp<CR>
nnoremap <silent> <LocalLeader>] :tabn<CR>

" general mappings
nnoremap <silent> <LocalLeader>q :q<CR>

" " VRoom configs
" let g:vroom_map_keys = 0
" let g:vroom_write_all = 1
" let g:vroom_use_vimux = 0 " this is the default config, leaving here to remember I can use with vimux :D
" map <silent> <LocalLeader>rl :VroomRunLastTest<CR>
" map <silent> <LocalLeader>rb :VroomRunTestFile<CR>
" map <silent> <LocalLeader>rf :VroomRunNearestTest<CR>
map <silent> <LocalLeader>t :call RunTestFile()<CR>
map <silent> <LocalLeader>r :call RunNearestTest()<CR>

" Copy to system clipboard (ctrl+c on visual mode)
vmap <C-c> "*y

" Vimux
map <silent> <LocalLeader>vq :VimuxCloseRunner<CR>

" a fill more shortcuts
nnoremap <silent> <LocalLeader>ss :source $MYVIMRC<CR>
nnoremap <silent> <LocalLeader><Space> :noh<CR>
nnoremap <silent> <LocalLeader>ww :%s/\s\+$//<CR>:let @/=''<CR><C-o>

" use ; as :
noremap ; :

" I have to be forced to use hjkl
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" helping with window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Set up highlight group & retain through colorscheme changes
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
map <silent> <LocalLeader>ws :highlight clear ExtraWhitespace<CR>

" Status line
set laststatus=2
set statusline=
set statusline+=%<\                       " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\        " buffer number, and flags
set statusline+=%-40f\                    " relative path
set statusline+=%=                        " seperate between right- and left-aligned
set statusline+=%1*%y%*%*\                " file type
set statusline+=%10(L(%l/%L)%)\           " line
set statusline+=%2(C(%v/125)%)\           " column
set statusline+=%P                        " percentage of file

" Undo configs
set undodir=~/.vim/undo
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload


" FUNCTIONS

function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Disable Autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
