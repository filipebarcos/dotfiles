"avoiding annoying CSApprox warning message
let g:CSApprox_verbose_level = 0

set nocompatible               " be iMproved (required)
if has('nvim')
  scriptencoding utf-8
  set encoding=utf-8
endif

filetype off                   " (required)

" Vundle Config
set rtp+=~/.vim/bundle/vundle

if filereadable(expand("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif

" Load my snippets
if filereadable(expand("~/.vimrc.snippets"))
  source ~/.vimrc.snippets
endif

" Wrap gitcommit file types at the appropriate length
filetype plugin indent on " (required)
compiler ruby

"I look good!
syntax on
set t_Co=256 " For 256 colors

if has('nvim')
  set termguicolors
  let $nvim_tui_enable_true_color=1
  colorscheme gruvbox
  " " Gruvbox specific settings
  let g:gruvbox_contrast_dark='hard'
  let g:gruvbox_vert_split='fg4'
else
  colorscheme dracula
endif

" Disable swap files
set noswapfile
set nobackup
set nowb

set autoindent
set background=dark            " Set backgroung to dark
set backspace=indent,eol,start " Intuitive backspacing
set hlsearch                   " Highlight matches
set hidden                     " Handle multiple buffers better
set incsearch                  " Highlight matches as you type
set laststatus=2               " Show the status line all the time
set nowritebackup              " Same as above
set number                     " Set line numbers
set scrolloff=3                " Show 3 lines of context around the cursor
set showcmd                    " Display incomplete commands
set showmatch                  " highlight match when found
set showmode                   " Display the mode you're in
set textwidth=0 nosmartindent tabstop=2 shiftwidth=2 softtabstop=2 expandtab
set title
set visualbell                 " No beeping
set wrap                       " Turn on line wrapping
set cursorline
set ttyfast                    " Blazing fast scroll
set lazyredraw                 " to avoid scrolling problems
set noshowmode                 " Lightline already shows the mode, no need to show again

set ignorecase                 " Case-insensitive searching
set smartcase                  " Case-sensitive IF contains a capital letter

set wildmenu                      " Enhanced command line completion
set wildmode=longest,list:longest " Complete files like shell

set complete=.,b,u,]                 " Current, buffers and tags
set completeopt=menu,preview         " Default config, just being explicit
set omnifunc=syntaxcomplete#Complete " Syntax completion enabled, depending on filetype

" With this config, I can za and hide indented content
set foldmethod=indent
set foldlevelstart=99
set foldlevel=99

set wildignore+=*/tmp/*,*.so,*.swp,*.zip

" other NERDTree configs
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.beam$', 'tags', '\.git$', '\.DS_Store$']
let NERDTreeShowHidden = 1

" FZF configs
map <silent> <LocalLeader>ff :FZF<CR>
map <silent> <LocalLeader>fb :Buffers<CR>

" This is the default extra key bindings
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'

" Find the string under the cursor accross files in project, using fzf and rg
if executable("rg")
  set grepprg=rg\ --vimgrep\ --no-heading
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --ignore-case '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview('up:60%')
    \           : fzf#vim#with_preview('right:50%:hidden', '?'),
    \   <bang>0)

  nnoremap <silent> <LocalLeader>g :Rg <C-r><C-w><cr>
  cabbrev ag Rg
  cabbrev Ag Rg
  cabbrev rg Rg
endif
"endof FZF +rg configs

" Tab mappings
nnoremap <silent> <LocalLeader><CR> :tabe<CR>
nnoremap <silent> <LocalLeader>[ :tabp<CR>
nnoremap <silent> <LocalLeader>] :tabn<CR>

" general mappings
nnoremap <silent> <LocalLeader>q :q<CR>
cabbrev W w
cabbrev Q q

" Vim-test configs
let test#strategy = "vimux" " Uses tmux window to run the tests
                            " https://github.com/janko-m/vim-test#strategies
" Vim-test mappings
map <silent> <LocalLeader>l :TestLast<CR>
map <silent> <LocalLeader>t :TestFile<CR>
map <silent> <LocalLeader>r :TestNearest<CR>

" Copy to system clipboard (ctrl+c on visual mode)
set clipboard=unnamed
vnoremap <C-c> "*y
vmap \\ :Commentary<CR>

" Vimux
map <silent> <LocalLeader>vq :VimuxCloseRunner<CR>

" a fill more shortcuts
nnoremap <silent> <LocalLeader>ee :tabe $MYVIMRC<CR>
nnoremap <silent> <LocalLeader>ss :source $MYVIMRC<CR>
nnoremap <silent> <LocalLeader><Space> :noh<CR>
nnoremap <silent> <LocalLeader>ww :%s/\s\+$//<CR>:let @/=''<CR><C-o>

" use ; as :
noremap ; :

" I have to be forced to use hjkl
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

" helping with window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Set up highlight group & retain through colorscheme changes
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
map <silent> <LocalLeader>ws :highlight clear ExtraWhitespace<CR>

" Undo configs
set undodir=~/.vim/undo
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" Setup vim-jsx plugin to allow jsx syntax on .js files
let g:jsx_ext_required = 0
" Setup syntax highlight for flowtype
let g:javascript_plugin_flow = 1

" FUNCTIONS

function! <SID>StripTrailingWhitespaces()
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Disable Autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType javascript.jsx setlocal omnifunc=javascriptcomplete#CompleteJS

" Make Ctags
command! MakeTags !ctags -R .
" Delete specific line number
command! -range -nargs=0 Delete <line1>,<line2>d|norm ``
" Split single line in multiple after comma ,
comman! NewLineAfterComma %s/,/,\r/g
