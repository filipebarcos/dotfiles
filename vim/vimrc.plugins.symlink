" Colorscheme
colorscheme tender

" NERDTree #########################################################################
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.beam$', 'tags', '\.git$', '\.DS_Store$']
let NERDTreeShowHidden = 1

" FZF ##############################################################################
map <silent> <LocalLeader>ff :FZF<CR>
map <silent> <LocalLeader>fb :Buffers<CR>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_buffers_jump = 1 " [Buffers] Jump to the existing window if possible
let g:fzf_tags_command = 'ctags -R' " [Tags] Command to generate tags file

" Lightline #########################################################################
let g:lightline = {
  \ 'colorscheme': 'tender',
  \ 'active': {
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'filetype', 'fileencoding' ] ]
  \ },
  \ 'component_function': {
  \   'filename': 'FilenameForLightline',
  \ }}

" Show full path of filename
function! FilenameForLightline()
  return expand('%')
endfunction

" Ack.vim ##########################################################################
if executable("rg")
  let g:ackprg = 'rg -S --no-heading --vimgrep'
endif

nnoremap <silent> <LocalLeader>g :Ack! <C-r><C-w><cr>
cabbrev ack Ack!
cabbrev Ack Ack!
cabbrev rg Ack!

" Vim-test #########################################################################
let test#strategy = {
  \ 'nearest': 'vimux',
  \ 'file':    'vimux',
  \ 'suite':   'vimux' }

map <silent> <LocalLeader>l :TestLast<CR>
map <silent> <LocalLeader>t :TestFile<CR>
map <silent> <LocalLeader>r :TestNearest<CR>

" Vim Commentary ###################################################################
vmap \\ :Commentary<CR>
nmap \\ :Commentary<CR>

" Vimux ############################################################################
map <silent> <LocalLeader>vq :VimuxCloseRunner<CR>

" ALE ######################################################################
let g:ale_fixers = {
\   '*': ['remove_trailing_lines'],
\   'go': ['gofmt'],
\   'ruby': ['rubocop'],
\   'javascript': ['eslint', 'prettier'],
\   'erb': ['erb', 'erubi'],
\   'graphql': ['eslint', 'gqlint', 'prettier'],
\   'html': ['prettier'],
\   'json': ['prettier'],
\   'markdown': ['prettier'],
\   'yaml': ['prettier'],
\}
let g:ale_close_preview_on_insert = 1
let g:ale_completion_enabled = 1
let g:ale_ruby_rubocop_executable = 'rubocop'
let g:ale_ruby_solargraph_executable = 'solargraph'
let g:ale_cursor_detail = 0
let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 0
let g:ale_enabled = 1

nmap <F8> :ALEFix<CR>

" vim-elixir
au BufRead,BufNewFile *.ex,*.exs set filetype=elixir

" PLEASE ORGANIZE ME !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

" Disable Autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Golang configs
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_auto_sameids = 1
let g:go_fmt_command = "goimports"
