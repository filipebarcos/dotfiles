colorscheme dracula_pro_van_helsing

" NERDTree #####################################################################
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>
let NERDTreeIgnore = ['\.beam$', 'tags', '\.git$', '\.DS_Store$']
let NERDTreeShowHidden = 1

" FZF ##########################################################################
map <silent> <LocalLeader>ff :FZF<CR>
map <silent> <LocalLeader>fb :Buffers<CR>

autocmd! FileType fzf
autocmd  FileType fzf set laststatus=0 noshowmode noruler
  \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler

let g:fzf_buffers_jump = 1 " [Buffers] Jump to the existing window if possible
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R --exclude=.git --exclude=node_modules --exclude=test --exclude=log --exclude=vendor'

" Lightline ####################################################################
let g:lightline = {
  \ 'colorscheme': 'dracula_pro',
  \ 'active': {
  \   'right': [ [ 'lineinfo' ],
  \              [ 'percent' ],
  \              [ 'filetype', 'fileencoding' ] ],
	\   'left':  [ [ 'mode', 'paste' ],
	\              [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
  \ },
  \ 'component_function': {
  \   'filename': 'FilenameForLightline',
	\   'cocstatus': 'coc#status'
  \ }}

" Show full path of filename
function! FilenameForLightline()
  return expand('%')
endfunction

" Ack.vim ######################################################################
if executable("rg")
  let g:ackprg = 'rg -S --no-heading --vimgrep'
endif

nnoremap <silent> <LocalLeader>g :Ack! <C-r><C-w><cr>
cabbrev ack Ack!
cabbrev Ack Ack!
cabbrev rg Ack!

" Vim-test #####################################################################
let test#strategy = {
  \ 'nearest': 'vimux',
  \ 'file':    'vimux',
  \ 'suite':   'vimux' }

map <silent> <LocalLeader>l :TestLast<CR>
map <silent> <LocalLeader>t :TestFile<CR>
map <silent> <LocalLeader>r :TestNearest<CR>

" Vim Commentary ###############################################################
vmap \\ :Commentary<CR>
nmap \\ :Commentary<CR>

" Vimux ########################################################################
map <silent> <LocalLeader>vq :VimuxCloseRunner<CR>

" COC.vim ######################################################################

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <NUL> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" vim-elixir ##################################################################
au BufRead,BufNewFile *.ex,*.exs set filetype=elixir

" Disable Autocomment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Golang configs
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

let g:go_auto_sameids = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_fmt_command = "goimports"

let g:go_highlight_array_whitespace_error = 1
let g:go_highlight_chan_whitespace_error = 1
let g:go_highlight_space_tab_error = 1
let g:go_highlight_trailing_whitespace_error = 1
let g:go_highlight_function_parameters = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_generate_tags = 1
let g:go_highlight_string_spellcheck = 1
let g:go_highlight_format_strings = 1
let g:go_highlight_variable_declarations = 1
let g:go_highlight_variable_assignments = 1
let g:go_highlight_diagnostic_errors = 1
let g:go_highlight_diagnostic_warnings = 1

" SQL file configs
au BufRead,BufNewFile *.sql set filetype=sql
au FileType sql set shiftwidth=4
au FileType sql set softtabstop=4
au FileType sql set tabstop=4

" Typescript
au BufRead,BufNewFile *.ts,*.d.ts set filetype=typescript
au FileType typescript set shiftwidth=2
au FileType typescript set softtabstop=2
au FileType typescript set tabstop=2

